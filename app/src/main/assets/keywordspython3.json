[
    {
        "key": "False",
        "description": "A Boolean value representing false. Used in logical operations and conditional statements."
    },
    {
        "key": "None",
        "description": "Represents the absence of a value or a null value in Python."
    },
    {
        "key": "True",
        "description": "A Boolean value representing true. Used in logical operations and conditional statements."
    },
    {
        "key": "and",
        "description": "A logical operator that returns True only if both operands are true."
    },
    {
        "key": "as",
        "description": "Used to create an alias when importing modules or in 'with' statements for context managers."
    },
    {
        "key": "assert",
        "description": "Used for debugging to check if a condition is True; raises AssertionError if False."
    },
    {
        "key": "async",
        "description": "Declares a function as a coroutine for asynchronous programming."
    },
    {
        "key": "await",
        "description": "Pauses execution until an async coroutine completes and returns its result."
    },
    {
        "key": "break",
        "description": "Exits the nearest enclosing loop (for or while) prematurely."
    },
    {
        "key": "class",
        "description": "Defines a new class, which is a blueprint for creating objects."
    },
    {
        "key": "continue",
        "description": "Skips the rest of the current loop iteration and moves to the next one."
    },
    {
        "key": "def",
        "description": "Used to define a function in Python."
    },
    {
        "key": "del",
        "description": "Deletes a variable, item in a list, or attribute of an object."
    },
    {
        "key": "elif",
        "description": "Short for 'else if'; used in conditional statements to check multiple conditions."
    },
    {
        "key": "else",
        "description": "Executes a block of code if the preceding 'if' or 'elif' conditions are False."
    },
    {
        "key": "except",
        "description": "Catches and handles exceptions in a try-except block."
    },
    {
        "key": "finally",
        "description": "A block of code that executes no matter what, used in try-except-finally."
    },
    {
        "key": "for",
        "description": "Starts a loop that iterates over a sequence (list, tuple, string, etc.)."
    },
    {
        "key": "from",
        "description": "Used to import specific attributes or functions from a module."
    },
    {
        "key": "global",
        "description": "Declares a variable as global, allowing modification inside a function."
    },
    {
        "key": "if",
        "description": "Starts a conditional statement; executes a block if the condition is True."
    },
    {
        "key": "import",
        "description": "Used to import modules or libraries into a Python script."
    },
    {
        "key": "in",
        "description": "Checks if a value exists in a sequence (list, tuple, string, etc.)."
    },
    {
        "key": "is",
        "description": "Checks if two variables refer to the same object in memory."
    },
    {
        "key": "lambda",
        "description": "Creates a small anonymous function (e.g., lambda x: x*2)."
    },
    {
        "key": "nonlocal",
        "description": "Declares a variable in a nested function as non-local (not global, but not local either)."
    },
    {
        "key": "not",
        "description": "A logical operator that inverts the truth value (not True â†’ False)."
    },
    {
        "key": "or",
        "description": "A logical operator that returns True if at least one operand is true."
    },
    {
        "key": "pass",
        "description": "A null operation; used as a placeholder where syntax requires a statement."
    },
    {
        "key": "raise",
        "description": "Manually triggers (raises) an exception in Python."
    },
    {
        "key": "return",
        "description": "Exits a function and optionally returns a value."
    },
    {
        "key": "try",
        "description": "Starts a block of code where exceptions can be caught and handled."
    },
    {
        "key": "while",
        "description": "Starts a loop that executes as long as the condition is True."
    },
    {
        "key": "with",
        "description": "Used for context management (e.g., file handling) to ensure resources are properly released."
    },
    {
        "key": "yield",
        "description": "Pauses a function and returns a value, making it a generator."
    }
]