[
    {
        "name": "logHelloWorld",
        "snippet": "console.log(\"Hello, World!\");"
    },
    {
        "name": "addFunction",
        "snippet": "function add(a, b) { return a + b; }"
    },
    {
        "name": "logTypeOfString",
        "snippet": "console.log(typeof \"Hello\"); // string"
    },
    {
        "name": "filterNumbers",
        "snippet": "const filtered = numbers.filter(n => n > 3);"
    },
    {
        "name": "joinArray",
        "snippet": "const str = array.join(', ');"
    },
    {
        "name": "reverseString",
        "snippet": "const reversed = str.split('').reverse().join('');"
    },
    {
        "name": "getCurrentDate",
        "snippet": "const today = new Date();"
    },
    {
        "name": "findMaxValue",
        "snippet": "const max = Math.max(...numbers);"
    },
    {
        "name": "setTimeoutExample",
        "snippet": "setTimeout(() => { console.log(\"This runs after 2 seconds\"); }, 2000);"
    },
    {
        "name": "changeElementColor",
        "snippet": "document.getElementByname(\"myElement\").style.color = \"red\";"
    },
    {
        "name": "showAlert",
        "snippet": "alert(\"This is an alert!\");"
    },
    {
        "name": "xhrRequest",
        "snippet": "const xhr = new XMLHttpRequest(); xhr.open(\"GET\", \"https://api.example.com/data\"); xhr.onload = () => console.log(xhr.responseText); xhr.send();"
    },
    {
        "name": "fetchData",
        "snippet": "fetch(\"https://api.example.com/data\").then(response => response.json()).then(data => console.log(data));"
    },
    {
        "name": "isEven",
        "snippet": "function isEven(num) { return num % 2 === 0; }"
    },
    {
        "name": "personClass",
        "snippet": "class Person { constructor(name) { this.name = name; } }"
    },
    {
        "name": "promiseExample",
        "snippet": "const myPromise = new Promise((resolve, reject) => { if (true) resolve(\"Success!\"); else reject(\"Failure!\"); });"
    },
    {
        "name": "jsonStringify",
        "snippet": "const jsonString = JSON.stringify(obj);"
    },
    {
        "name": "jsonParse",
        "snippet": "const obj = JSON.parse(jsonString);"
    },
    {
        "name": "forEachArray",
        "snippet": "array.forEach(item => console.log(item));"
    },
    {
        "name": "addEventListenerClick",
        "snippet": "document.getElementByname(\"myButton\").addEventListener(\"click\", () => { alert(\"Button clicked!\"); });"
    },
    {
        "name": "objectAssign",
        "snippet": "const combined = Object.assign({}, obj1, obj2);"
    },
    {
        "name": "checkKeyInObject",
        "snippet": "console.log(\"a\" in obj);"
    },
    {
        "name": "emptyArray",
        "snippet": "const emptyArray = [];"
    },
    {
        "name": "arrayLength",
        "snippet": "console.log(array.length);"
    },
    {
        "name": "arrayPop",
        "snippet": "array.pop();"
    },
    {
        "name": "arrayPush",
        "snippet": "array.push('new item');"
    },
    {
        "name": "arrayIndexOf",
        "snippet": "const index = array.indexOf('item');"
    },
    {
        "name": "uniqueArray",
        "snippet": "const uniqueArray = [...new Set(array)];"
    },
    {
        "name": "arrayIncludes",
        "snippet": "const exists = array.includes('item');"
    },
    {
        "name": "mapDoubleNumbers",
        "snippet": "const doubled = numbers.map(n => n * 2);"
    },
    {
        "name": "logTime",
        "snippet": "console.log(date.toLocaleTimeString('en-US', { hour12: false }));"
    },
    {
        "name": "cloneObject",
        "snippet": "const clone = Object.assign({}, obj);"
    },
    {
        "name": "intervalExample",
        "snippet": "let count = 10; const interval = setInterval(() => { console.log(count); count--; if (count < 0) clearInterval(interval); }, 1000);"
    },
    {
        "name": "logStringLength",
        "snippet": "console.log(str.length);"
    },
    {
        "name": "checkEmptyString",
        "snippet": "const isEmpty = str.trim() === '';"
    },
    {
        "name": "compareStrings",
        "snippet": "console.log(\"apple\" === \"orange\");"
    },
    {
        "name": "styledLog",
        "snippet": "console.log('%c This is a styled message', 'color: blue; font-size: 20px;');"
    },
    {
        "name": "sleepFunction",
        "snippet": "async function sleep(milliseconds) { return new Promise(resolve => setTimeout(resolve, milliseconds)); }"
    },
    {
        "name": "isGreaterThan",
        "snippet": "const isGreater = (a, b) => a > b;"
    },
    {
        "name": "isPositive",
        "snippet": "const isPositive = (num) => num > 0;"
    },
    {
        "name": "fetchDataAsync",
        "snippet": "async function fetchData(url) { const response = await fetch(url); const data = await response.json(); console.log(data); }"
    },
    {
        "name": "arraySlice",
        "snippet": "const subArray = array.slice(1, 3);"
    },
    {
        "name": "groupByCategory",
        "snippet": "const grouped = array.reduce((acc, obj) => { const key = obj.category; if (!acc[key]) acc[key] = []; acc[key].push(obj); return acc; }, {});"
    },
    {
        "name": "cssImageBorderRadius",
        "snippet": "img { border-radius: 50%; }"
    },
    {
        "name": "changeFontSize",
        "snippet": "document.getElementByname(\"myElement\").style.fontSize = \"20px\";"
    },
    {
        "name": "hideElement",
        "snippet": "document.getElementByname(\"myElement\").style.display = \"none\";"
    },
    {
        "name": "showElement",
        "snippet": "document.getElementByname(\"myElement\").style.display = \"block\";"
    },
    {
        "name": "addClassToElement",
        "snippet": "document.getElementByname(\"myElement\").classList.add(\"new-class\");"
    },
    {
        "name": "removeClassFromElement",
        "snippet": "document.getElementByname(\"myElement\").classList.remove(\"old-class\");"
    },
    {
        "name": "toggleDarkMode",
        "snippet": "document.body.classList.toggle(\"dark-mode\");"
    },
    {
        "name": "findItemById",
        "snippet": "const foundItem = array.find(item => item.name === 1);"
    },
    {
        "name": "reduceSum",
        "snippet": "const sum = numbers.reduce((acc, num) => acc + num, 0);"
    },
    {
        "name": "objectKeys",
        "snippet": "const keys = Object.keys(obj);"
    },
    {
        "name": "objectValues",
        "snippet": "const values = Object.values(obj);"
    },
    {
        "name": "isPrime",
        "snippet": "function isPrime(num) { for (let i = 2; i < num; i++) { if (num % i === 0) return false; } return num > 1; }"
    },
    {
        "name": "factorialFunction",
        "snippet": "function factorial(n) { return (n <= 1) ? 1 : n * factorial(n - 1); }"
    },
    {
        "name": "stringCaseMethods",
        "snippet": "const upper = str.toUpperCase(); const lower = str.toLowerCase();"
    },
    {
        "name": "regexTest",
        "snippet": "const regex = /pattern/; console.log(regex.test(\"example pattern\"));"
    },
    {
        "name": "querySelectorAllClickEvent",
        "snippet": "document.querySelectorAll(\".myClass\").forEach(element => { element.addEventListener(\"click\", () => alert(\"Clicked!\")); });"
    },
    {
        "name": "getUrlParameter",
        "snippet": "const urlParams = new URLSearchParams(window.location.search); const paramValue = urlParams.get('param');"
    },
    {
        "name": "arrayMapExample",
        "snippet": "const newArray = oldArray.map(item => item.toUpperCase());"
    }
]
